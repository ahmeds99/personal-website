---
export const prerender = true;

import Carousel from "@components/Carousel";
import type { GetStaticPaths } from "astro";
import type { IStadium } from "src/scripts/IStadium";

export const getStaticPaths = (async () => {
  const stadiumFiles: any[] = await Astro.glob("../../content/stadiums/*.md");

  const stadiumObjects: IStadium[] = stadiumFiles.map((stadium: any) => ({
    title: stadium.frontmatter.title,
    internalName: stadium.frontmatter.internalName,
    description: stadium.rawContent(),
    homeTeam: stadium.frontmatter.homeTeam,
    awayTeam: stadium.frontmatter.awayTeam,
    city: stadium.frontmatter.city,
    country: stadium.frontmatter.country,
    rating: stadium.frontmatter.rating,
    visited: stadium.frontmatter.visited,
  }));

  return stadiumObjects.map((stadium) => ({
    params: {
      stadium: stadium.internalName,
    },
    props: {
      stadium,
    },
  }));
}) satisfies GetStaticPaths;

const { stadium } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/public/stadiums/*/*.{webp,jpg,png,gif,mp4}"
);

const title = "Stadion";

const filteredImages = Object.entries(images).filter(([key]) =>
  key.includes(stadium.internalName)
);

const numberOfImages = filteredImages.length;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>

  <body class="bg-zinc-700">
    <div class="relative h-[100svh] w-[150svh] ml-32 flex">
      <Carousel stadium={stadium} numberOfImages={numberOfImages} client:load />
    </div>
  </body>
</html>
